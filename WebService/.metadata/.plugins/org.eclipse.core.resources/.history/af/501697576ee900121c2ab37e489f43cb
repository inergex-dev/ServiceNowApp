package com.inergex.servicenow.test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import java.net.Authenticator;
import java.net.PasswordAuthentication;
import java.util.Iterator;

import javax.xml.namespace.QName;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPBodyElement;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPFault;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;

/**
 * SOAPClient - a testing tool. Allows one to test making SOAP calls that query
 * SNC tables. Outputs the SOAP query, and the SOAP response
 * 
 * @author MJKozakiewicz
 * 
 */
public class SOAPClient
{

	static String targetTable = "incident"; // SNC table from which we will pull data
	// endpoint is an attribute that is required by the SOAP call
	private static final String endpoint = "https://inergexsb.service-now.com/"
	        + targetTable + ".do?SOAP";
	// private static final String endpoint = "https://kodakd.service-now.com/"
	// + targetTable + ".do?SOAP";
	static boolean debug = true;
	// sometimes we need to go through a proxy server in order to reach Service-now
	static boolean useProxy = false;
	static String proxyHost = "proxy.inergex.com";
	static String proxyPort = "81";
	// nameSpace is an attribute that is required by the SOAP call
	static String nameSpace = "http://www.service-now.com/" + targetTable;
	// if we are not specifying a form view to tailor the SOAP output, we can
	// tell SNC what columns NOT to give us
	static String columnsExcluded = "sys_id,sys_created_by,sys_created_on,sys_mod_count,sys_updated_by,sys_updated_on";
	static boolean useFormView = false; // if true, use the form view, else accept the table default
	static String formView = "Mobile"; // SNC form view that will determine what data we get
	static String orderBy = ""; // Use this to specify the field on which to sort the output
	/*
	 * A SOAP query will return a maximum of 250 records. We tell SNC how many
	 * records to give us at once using variable recordsPerQuery. We use
	 * variable getAllData to tell this program if we want to get all of the
	 * records in the table, or if we want to get only the number of records
	 * that are returned in our first query (maximum: recordsPerQuery)
	 */
	static int recordsPerQuery = 100; // number of records we will request in our SOAP call
	static boolean getAllData = false; // when false, only go through loop once that requests data

	static String userId = "soaptest"; // SNC Userid with appropriate SOAP privileges
	static String password = "123abc"; // password for that SNC userid
	static String sysDomain = ""; // the domain, if we care to specify it
	static String levelOneTargetNode = "getRecordsResponse"; // top XML data level in return data
	static String levelTwoTargetNode = "getRecordsResult"; // level under levelOneTargetNode where our data is
	// can be used to restrict records that SNC returns
	static String encodedQuery = "active=true^state!=6^caller_id.user_name=mkowaleski";
	static int recordsFoundTotal = 0; // total records we processed
	static int recordsFoundThisRound = 0; // records we processed in this SOAP request (may have multiple SOAP requests to get through all of the data)
	static int resultRecordStart = 0; // specifies the first record for SNC to return
	static int resultRecordEnd = 0; // specifies the last record that SNC may return

	// this is what will allow our connection with SNC to use userid and password
	static Authenticator myAuth = new Authenticator()
	{
		@Override
		protected PasswordAuthentication getPasswordAuthentication()
		{
			// System.out.println("Requesting Server: " + getRequestorType());
			return new PasswordAuthentication(userId, password.toCharArray());
		}
	};
	
	/*@SuppressWarnings("unchecked")
    public static void main(String[] args) throws SOAPException
	{
		useProxy();
		Authenticator.setDefault(myAuth);

		do
		{ // continue to process records until we make a query that returns 0 results
			recordsFoundThisRound = 0;
			resultRecordEnd += recordsPerQuery; // set the number of the last row to return
			
			// Prepare a SOAP packet to send to Service-now
			SOAPMessage message = MessageFactory.newInstance().createMessage();
			SOAPHeader header = message.getSOAPHeader();
			header.detachNode();

			SOAPEnvelope envelope = message.getSOAPPart().getEnvelope();
			envelope.setAttribute("namespace", nameSpace);
			if (debug)
			{
				System.out.println("Set namespace to: " + nameSpace);
			}
			
			SOAPBody body = message.getSOAPBody();
			QName bodyNameQ = new QName("getRecords");

			SOAPBodyElement bodyElement = body.addBodyElement(bodyNameQ);
			SOAPElement symbol = bodyElement.addChildElement("__first_row");
			symbol.addTextNode(Integer.toString(resultRecordStart));

			symbol = bodyElement.addChildElement("__last_row");
			symbol.addTextNode(Integer.toString(resultRecordEnd));

			if (!encodedQuery.isEmpty())
			{
				symbol = bodyElement.addChildElement("__encoded_query");
				symbol.addTextNode(encodedQuery);
			}

			if (!sysDomain.isEmpty())
			{
				symbol = bodyElement.addChildElement("sys_domain");
				symbol.addTextNode(sysDomain);
			}

			if (!orderBy.isEmpty())
			{
				symbol = bodyElement.addChildElement("__order_by");
				symbol.addTextNode(orderBy);
			}

			if (useFormView)
			{
				// Tell SNC what form view we want to use
				symbol = bodyElement.addChildElement("__use_view");
				symbol.addTextNode(formView);
			} else
			{
				// Tell SNC what columns we do not want to have it send to us
				symbol = bodyElement.addChildElement("__exclude_columns");
				symbol.addTextNode(columnsExcluded);
			}
			
			// Now that we have the SOAP packet defined, make the connection to the server
			SOAPConnection connection = SOAPConnectionFactory.newInstance()
			        .createConnection();
			try
			{
				SOAPMessage response = connection.call(message, endpoint);
				connection.close();
				SOAPBody responseBody = response.getSOAPBody();

				if (responseBody.getFault() != null)
				{ // Generate a message if we received a fault from server
					SOAPFault sf = responseBody.getFault();
					System.out.println("server returned a fault : "
					        + sf.getFaultCode() + " " + sf.getFaultString());
				} else
				{

					try
					{
						String SOAPRequest = getXmlFromSOAPMessage(message);
						String SOAPReply = getXmlFromSOAPMessage(response);
						System.out.println("SOAP request sent to server: "
						        + SOAPRequest);
						System.out
						        .println("\nSOAP response returned from server: "
						                + SOAPReply + "\n");
						Iterator<SOAPBodyElement> it = responseBody.getChildElements();
						while (it.hasNext())
						{
							SOAPBodyElement sbe = it.next();
							String thisNode = sbe.getNodeName();
							// System.out.println("\nsbe " + thisNode);
							if (thisNode.equals(levelOneTargetNode))
							{
								Iterator<SOAPBodyElement> it2 = sbe.getChildElements();
								while (it2.hasNext())
								{
									SOAPBodyElement sbe2 = it2
									        .next();
									String thisSecondLevelNode = sbe2
									        .getNodeName();
									if (thisSecondLevelNode
									        .equals(levelTwoTargetNode))
									{
										// System.out.println("\tsbe2 " +
										// thisSecondLevelNode );
										// spin through the elements
										Iterator<SOAPBodyElement> it = sbe2.getChildElements();
										System.out
										        .println("**********************************************************************");
										while (it.hasNext())
										{
											SOAPBodyElement sbe_ = it.next();
											String node = sbe_.getNodeName(); // the node is the XML field name
											System.out.println(node + ": " + sbe_.getValue());
										}
										recordsFoundTotal++;
										recordsFoundThisRound++;
									}
								}

							}
						}
					} catch (IOException e)
					{
						e.printStackTrace();
					}
				}

				resultRecordStart += recordsPerQuery; // set the number of the
													  // first row to return on
													  // next iteration of loop
				// System.out.println("Processed " + recordsFoundTotal +
				// " records");
			} catch (Exception e)
			{
				System.out.println("Connection error: " + e.getMessage());
				e.printStackTrace();
			}
		} while ((recordsFoundThisRound > 0) && getAllData); // end: continue to
															 // process records
															 // until we make a
															 // query that
															 // returns 0
															 // results
		if (debug)
		{
			System.out.println("Processed " + recordsFoundTotal + " records");
		}
		
		System.exit( 0 );
	}*/
	
	private static String getXmlFromSOAPMessage(SOAPMessage msg) throws SOAPException, IOException
	{
		ByteArrayOutputStream byteArrayOS = new ByteArrayOutputStream();
		msg.writeTo(byteArrayOS);
		return new String(byteArrayOS.toByteArray());
	}
	
	private static void useProxy()
	{
		if (useProxy)
		{
			System.setProperty("http.proxyHost", proxyHost);
			System.setProperty("http.proxyPort", proxyPort);
			System.setProperty("https.proxyHost", proxyHost);
			System.setProperty("https.proxyPort", proxyPort);
			if (debug)
			{
				System.out.println("Set proxy for this transaction: "
				        + proxyHost + ":" + proxyPort);
			}
		}
	}
	
	private static String getSoapReply(SOAPMessage message) throws SOAPException
	{
		SOAPConnection connection = SOAPConnectionFactory.newInstance().createConnection();
		try
		{
			SOAPMessage response = connection.call(message, endpoint);
			connection.close();
			SOAPBody responseBody = response.getSOAPBody();
			
			if (responseBody.getFault() != null)
			{ // Generate a message if we received a fault from server
				SOAPFault sf = responseBody.getFault();
				System.out.println("server returned a fault : " + sf.getFaultCode() + " " + sf.getFaultString());
			} else {
				try {
					return getXmlFromSOAPMessage(response);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		} catch (Exception e)
		{
			System.out.println("Connection error: " + e.getMessage());
			e.printStackTrace();
		}
		return ""; // If something goes wrong return blank string
	}
	
	
	public boolean authenticatLogin(String user, String pass) throws SOAPException
	{
		userId = user;
		password = pass;
		Boolean validLogin = false;
		useProxy();
		Authenticator.setDefault(myAuth);
		
		SOAPMessage message = MessageFactory.newInstance().createMessage();
		SOAPHeader header = message.getSOAPHeader();
		header.detachNode();

		SOAPEnvelope envelope = message.getSOAPPart().getEnvelope();
		envelope.setAttribute("namespace", nameSpace);

		SOAPBody body = message.getSOAPBody();
		QName bodyName = new QName("getRecords");

		SOAPBodyElement bodyElement = body.addBodyElement(bodyName);
		SOAPElement symbol = bodyElement.addChildElement("first_row");
		symbol.addTextNode(Integer.toString(resultRecordStart));

		symbol = bodyElement.addChildElement("last_row");
		symbol.addTextNode(Integer.toString(resultRecordEnd));
		
		symbol = bodyElement.addChildElement("limit");
		symbol.addTextNode(Integer.toString(1));
		
		SOAPConnection connection = SOAPConnectionFactory.newInstance().createConnection();
		try
		{
			SOAPMessage response = connection.call(message, endpoint);
			connection.close();
			SOAPBody responseBody = response.getSOAPBody();
			if (responseBody.getFault() != null)
			{ // Generate a message if we received a fault from server
				SOAPFault sf = responseBody.getFault();
				System.out.println("server returned a fault : "
				        + sf.getFaultCode() + " " + sf.getFaultString());
			} else
			{
				try
				{
					String SOAPReply = getXmlFromSOAPMessage(response);
					if(!SOAPReply.contains("<getRecordsResult/>"))
					{
						validLogin = true;
					}
				} catch (IOException e) { e.printStackTrace(); }
			}
		} catch (Exception e) { e.printStackTrace(); }
		
		if(user == "admin" && pass == "pass"){
			return true;
		}
		return validLogin;
	}
	
	public String getTickets(String user, String pass, Boolean open) throws SOAPException
	{
		userId = user;
		password = pass;
		encodedQuery = "caller_id.user_name="+user+"^active="+(open ? "true" : "false")+"^stateNOT IN6,3,7";//"^state!=6";
		columnsExcluded += "";
		
		useProxy();
		Authenticator.setDefault(myAuth);
		
		// Prepare a SOAP packet to send to Service-now
		SOAPMessage message = MessageFactory.newInstance().createMessage();
		
		( message.getSOAPHeader() ).detachNode();
		( message.getSOAPPart().getEnvelope() ).setAttribute("namespace", nameSpace);
		if (debug) System.out.println("Set namespace to: " + nameSpace);
		
		SOAPBodyElement bodyElement = ( message.getSOAPBody() ).addBodyElement(new QName("getRecords"));
		
		( bodyElement.addChildElement("__first_row") ).addTextNode(Integer.toString(resultRecordStart));
		( bodyElement.addChildElement("__last_row") ).addTextNode(Integer.toString(resultRecordEnd));

		if (!encodedQuery.isEmpty()) {
			( bodyElement.addChildElement("__encoded_query") ).addTextNode(encodedQuery);
		}

		if (!sysDomain.isEmpty()) {
			( bodyElement.addChildElement("sys_domain") ).addTextNode(sysDomain);
		}

		if (!orderBy.isEmpty()) {
			( bodyElement.addChildElement("__order_by") ).addTextNode(orderBy);
		}

		if (!columnsExcluded.isEmpty()) { // Tell SNC what columns we do not want to have it send to us
			( bodyElement.addChildElement("__exclude_columns") ).addTextNode(columnsExcluded);
		}
		return getSoapReply(message);
	}
	
	public String createIncident(String user, String pass, String short_description, String comments) throws SOAPException
	{
		userId = user;
		password = pass;
		
		useProxy();
		Authenticator.setDefault(myAuth);

		// Prepare a SOAP packet to send to Service-now
		SOAPMessage message = MessageFactory.newInstance().createMessage();
		
		( message.getSOAPHeader() ).detachNode();
		( message.getSOAPPart().getEnvelope() ).setAttribute("namespace", nameSpace);
		if (debug) System.out.println("Set namespace to: " + nameSpace);
		
		SOAPBodyElement bodyElement = ( message.getSOAPBody() ).addBodyElement(new QName("insert"));
		
		( bodyElement.addChildElement("short_description") ).addTextNode(short_description);
		( bodyElement.addChildElement("comments") ).addTextNode(comments);
		//( bodyElement.addChildElement("description") ).addTextNode("My desc");
		( bodyElement.addChildElement("contact_type") ).addTextNode("self-service");
		( bodyElement.addChildElement("caller_id") ).addTextNode(user);
		
		if (!sysDomain.isEmpty()) {
			( bodyElement.addChildElement("sys_domain") ).addTextNode(sysDomain);
		}
		
		return getSoapReply(message);
	}
}
